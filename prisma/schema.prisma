generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Titulacao {
  DOUTOR
  MESTRE
  ESPECIALISTA
}

enum StatusAtividade {
  ATIVO
  AFASTADO
  LICENCA
  NAO_ATIVO
}

enum ModeloCurso {
  PRESENCIAL
  HIBRIDO
  EAD
}

enum Referencia {
  PES_I_A
  PES_I_B
  PES_I_C
  PES_I_D
  PES_I_E
  PES_I_F
  PES_I_G
  PES_I_H
  PES_II_A
  PES_II_B
  PES_II_C
  PES_II_D
  PES_II_E
  PES_II_F
  PES_II_G
  PES_II_H
  PES_III_A
  PES_III_B
  PES_III_C
  PES_III_D
  PES_III_E
  PES_III_F
  PES_III_G
  PES_III_H
}

enum Turno {
  MATUTINO
  VESPERTINO
  NOTURNO
}

enum TipoMateria {
  OBRIGATORIA
  OPTATIVA
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MONITOR
}

enum TipoMonitor {
  MONITOR
  PESQUISADOR
}

enum DiaSemana {
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
  DOMINGO
}

model Unidade {
  id        String  @id
  nome      String
  latitude  Float
  longitude Float
}


model Professor {
  id                 String    @id @default(uuid())
  nome               String
  email              String    @unique
  titulacao          Titulacao
  idUnidade          String    @db.VarChar(5)
  referencia         Referencia
  lattes             String @unique
  statusAtividade    StatusAtividade @default(ATIVO)
  observacoes        String?

  materias           Materia[]
  cursoCoordenado    Curso? @relation("CoordenadorCurso")
  monitores          Monitor[]
}


model Materia {
  id           String    @id @default(uuid())
  nome         String
  cargaHoraria Int

  professorId  String?
  professor    Professor? @relation(fields: [professorId], references: [id])

  cursos       CursoMateria[]
}

model Curso {
  id             String    @id @default(uuid())
  nome           String
  codigo         String    @db.VarChar(4) @unique
  sigla          String    @db.VarChar(4)
  modelo         ModeloCurso

  coordenadorId  String @unique
  coordenador    Professor @relation("CoordenadorCurso", fields: [coordenadorId], references: [id])

  materias       CursoMateria[]
}

model CursoMateria {
  cursoId   String
  materiaId String

  curso     Curso   @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  materia   Materia @relation(fields: [materiaId], references: [id])

  @@id([cursoId, materiaId])
}

model Usuario {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  senha     String
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(false)
  monitorId String?  @unique
  
  monitor   Monitor? @relation(fields: [monitorId], references: [id])
  pontos    Ponto[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Monitor {
  id                    String        @id @default(uuid())
  nome                  String
  email                 String        @unique
  cargaHorariaSemanal   Int          // em horas
  tipo                  TipoMonitor
  nomePesquisaMonitoria String
  professorId           String
  
  professor             Professor    @relation(fields: [professorId], references: [id])
  usuario               Usuario?
  horarios              HorarioTrabalho[]
  
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model HorarioTrabalho {
  id          String    @id @default(uuid())
  monitorId   String
  diaSemana   DiaSemana
  horasTrabalho Int     // n√∫mero de horas neste dia
  
  monitor     Monitor   @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  
  @@unique([monitorId, diaSemana])
}

model Ponto {
  id        String   @id @default(uuid())
  usuarioId String
  entrada   DateTime
  saida     DateTime?
  
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
